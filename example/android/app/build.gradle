plugins {
    id 'com.onesignal.androidsdk.onesignal-gradle-plugin' version '0.8.0'
}
apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'
apply plugin: "com.android.application"
import com.android.build.OutputFile

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true
repositories {
    maven { url 'https://maven.google.com' }
}
android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    dexOptions {
        jumboMode true
    }
    defaultConfig {
        applicationId 'ir.saffarino.baghalimoon'
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 145
        versionName "1.45"
        lintOptions {
            abortOnError false
            checkReleaseBuilds false
        }
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        manifestPlaceholders = [onesignal_app_id               : "12637e49-1ef9-44d3-b902-de1f14e4cd5c",
                                // Project number pulled from dashboard, local value is ignored.
                                onesignal_google_project_number: "REMOTE"]

    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
//            if (abi != null) {  // null for the universal-debug, universal-release variants
            output.versionCodeOverride =
                    2 * 1048576 + defaultConfig.versionCode
//            }
        }
    }
    productFlavors {
    }
}

dependencies {
    compile project(':react-native-maps')
    compile project(':react-native-vector-icons')
    compile 'com.facebook.android:facebook-android-sdk:4.22.1'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.facebook.react:react-native:0.51.1'
    compile project(':react-native-navigation')
    compile project(':react-native-hockeyapp')
    // <--- add this
    compile project(path: ':appcenter-crashes')
    compile project(path: ':appcenter-analytics')
    compile project(path: ':appcenter')
    compile project(':react-native-code-push')
    compile 'com.onesignal:OneSignal:3.8.3'
    compile project(':react-native-device-info')
    compile project(path: ':react-native-exception-handler')
    compile project(':react-native-spinkit')
    compile project(path: ':react-native-gesture-handler')
    compile project(path: ':react-native-spinkit')
    compile 'com.android.support:support-core-utils:27.1.1'
}
apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
